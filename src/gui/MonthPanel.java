package gui;

import import_export.DatabaseAccess.AccessDB;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import javax.swing.BorderFactory;
import javax.swing.JToggleButton;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;

/**
 * Blueprint for a month panel
 *
 * @author Laura Pein
 */
public class MonthPanel extends javax.swing.JPanel {

    /**
     * Creates new form MonthPanel
     */
    private LocalDate currentDateMonth;
    private LocalDate newDate = null;
    private int buttonAmount = 31;
    private JToggleButton[] buttons;
    private Month monthName;
    private DateTimeFormatter dtf;
    private AppointmentDlg dlg;
    private AppointmentGUI tGUI;

    /**
     * Construcot for a month panel.
     *
     * @param monthName Name of the month. Used for the border.
     * @param tGUI Reference to the JTable which is holding the Appointments
     */
    public MonthPanel(Month monthName, AppointmentGUI tGUI) {
        initComponents();
        this.monthName = monthName;

        //Custom Border. Referenz: StackOverflow
        this.dayPanel.setBorder(BorderFactory.createTitledBorder(null, monthName.name(), TitledBorder.LEFT, TitledBorder.CENTER, new Font("Arial", Font.PLAIN, 14), Color.BLACK));
        this.calPanel.setLayout(new GridLayout(5, 7));
        //Jetziger Monat wird gesetzt um nachher den Text zuzuweisen.
        this.currentDateMonth = LocalDate.of(2019, monthName, 1);
        this.dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        initButtons();
        this.tGUI = tGUI;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calPanel = new javax.swing.JPanel();
        dayPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout calPanelLayout = new javax.swing.GroupLayout(calPanel);
        calPanel.setLayout(calPanelLayout);
        calPanelLayout.setHorizontalGroup(
            calPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 675, Short.MAX_VALUE)
        );
        calPanelLayout.setVerticalGroup(
            calPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );

        add(calPanel, java.awt.BorderLayout.CENTER);

        dayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Days", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N
        dayPanel.setLayout(new java.awt.GridLayout(1, 7));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Monday");
        dayPanel.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tuesday");
        dayPanel.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Wednesday");
        dayPanel.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Thursday");
        dayPanel.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Friday");
        dayPanel.add(jLabel5);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Saturday");
        dayPanel.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Sunday");
        dayPanel.add(jLabel7);

        add(dayPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates and adds all JToggleButtons for a month panel.
     */
    private void initButtons() {
        checkMonday();
        //JToggleButtons bleiben gedrückt
        this.buttons = new JToggleButton[this.buttonAmount];
        for (int i = 0; i < this.buttons.length; i++) {
            this.buttons[i] = new JToggleButton(i + "");
            this.buttons[i].setFont(new Font("Arial", 0, 18));
            //Text in die Mitte
            this.buttons[i].setHorizontalAlignment(SwingConstants.CENTER);
            this.buttons[i].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    onAddAppointment(evt);
                }
            });
            //Buttns werden zum Panel hinzugefügt
            this.calPanel.add(buttons[i]);
        }

        //Text der Buttons wird gesetzt
        for (int i = 0; i < this.buttons.length; i++) {
            LocalDate finalDate = newDate.plusDays(i);
            this.buttons[i].setText(finalDate.format(dtf));
        }
    }

    /**
     * Checks if the first day is a monday. If not the method will add extra
     * space for the last monday.
     */
    public void checkMonday() {
        //Bei einem Kalender ist der erste Tag der angezeigt wird immer ein Montag.
        //Falls der 1. jetzt kein Montag ist, muss der letzte Montag im letzten
        //Monat gefunden werden. Gleichzeitig muss der Platz im Panel erhöht werden.
        switch (currentDateMonth.getDayOfWeek()) {
            case MONDAY:
                newDate = currentDateMonth.minusDays(0);
                break;
            case TUESDAY:
                newDate = currentDateMonth.minusDays(1);
                this.buttonAmount += 1;
                break;
            case WEDNESDAY:
                newDate = currentDateMonth.minusDays(2);
                this.buttonAmount += 2;
                break;
            case THURSDAY:
                newDate = currentDateMonth.minusDays(3);
                this.buttonAmount += 3;
                break;
            case FRIDAY:
                newDate = currentDateMonth.minusDays(4);
                this.buttonAmount += 4;
                break;
            case SATURDAY:
                newDate = currentDateMonth.minusDays(5);
                this.buttonAmount += 5;
                break;
            case SUNDAY:
                newDate = currentDateMonth.minusDays(6);
                this.buttonAmount += 6;
                break;
        }
        //Monate mit 30 Tagen haben generell einen Tag weniger als kann der Platz
        //um einen button verringert werden.
        if (this.monthName == Month.APRIL) {
            this.buttonAmount -= 1;
        } else if (this.monthName == Month.JUNE) {
            this.buttonAmount -= 1;
        } else if (this.monthName == Month.SEPTEMBER) {
            this.buttonAmount -= 1;
        } else if (this.monthName == Month.NOVEMBER) {
            this.buttonAmount -= 1;
        }
    }

    /**
     * Uses the JDialog to create an Appointment.
     * The Method will also add the created Appointment to the JTable and, if choosen, to the database.
     */
    private void onAddAppointment(ActionEvent evt) {
        //Mit getSource() bekommt man den Button, der mit dem Event aufgerufen wurde.s
        JToggleButton bt = (JToggleButton) evt.getSource();
        //neuer Dialog wird erstellt mit dem Text des Buttons. (Begrüßung)
        this.dlg = new AppointmentDlg(null, true, bt.getText());
        this.dlg.setVisible(true);
        //Wenn der Benutzer nicht abbricht wird der Eintrag hinzugefügt
        if (dlg.isOk()) {
            tGUI.addAppointment(dlg.getApp());
        } else {
            System.err.print("Error");
        }
        try {
            //Falls der Benutzer den Eintrag auch in der DB haben will (Checkbox)
            //wird er jetzt hinzugefügt
            if (dlg.getApp().isIsSavedToDB()) {
                AccessDB adb = AccessDB.getInstance();
                adb.persistEntity(dlg.getApp());
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        bt.setSelected(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel calPanel;
    private javax.swing.JPanel dayPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
