package gui;

import import_export.DatabaseAccess.AccessDB;
import data.Appointment;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import model.AppointmentModel;
import model.CustomRenderer;

/**
 * Displays the JTable with all Appointments
 * @author Laura Pein
 */
public class AppointmentGUI extends javax.swing.JFrame {

    /**
     * Creates new form AppointmentGUI
     */
    private AppointmentModel model = new AppointmentModel();
    private CustomRenderer renderer = new CustomRenderer();
    private AccessDB dbAccess = new AccessDB();

    public AppointmentGUI() {
        try {
            initComponents();
            //Table konfigurieren
            this.taAppointments.setModel(model);
            this.taAppointments.setDefaultRenderer(String.class, renderer);
            //Nur ein Eintrag kann ausgewählt werden
            this.taAppointments.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            this.taAppointments.setFont(new Font("Arial", 0, 18));
            //Schriftart der Spaltenüberschriften setzen.
            this.taAppointments.getTableHeader().setFont(new Font("Arial", 0, 14));
            this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            this.model.setList(dbAccess.loadAllEntries());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenu = new javax.swing.JPopupMenu();
        mDelete = new javax.swing.JMenuItem();
        mUpload = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        taAppointments = new javax.swing.JTable();

        mDelete.setText("Delete Entry");
        mDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDelete(evt);
            }
        });
        popMenu.add(mDelete);

        mUpload.setText("Upload Entry");
        mUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onUpload(evt);
            }
        });
        popMenu.add(mUpload);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        taAppointments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClicked(evt);
            }
        });
        jScrollPane1.setViewportView(taAppointments);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClicked
        //Pop-Up aufrufen wenn die rechte Maustaste geklickt wird
        if (evt.getButton() == MouseEvent.BUTTON3) {
            this.popMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_onClicked

    private void onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDelete
        //Ausgewählten Eintrag löschen. Wenn er auch in der Db ist wird er dort
        //ebenfalls gelöscht.
        Appointment toDelete = model.getAppFromIndex(this.taAppointments.getSelectedRow());
        try {
            if (toDelete.isIsSavedToDB()) {
                model.delete(toDelete);
                dbAccess.deleteEntry(toDelete);
            } else {
                model.delete(toDelete);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_onDelete

    private void onUpload(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onUpload
        //Ausgewählter Eintrag wird in die Datenbank geladen
        try {
            Appointment toUpload = model.getAppFromIndex(this.taAppointments.getSelectedRow());
            if (toUpload.isIsSavedToDB()) {
                JOptionPane.showMessageDialog(this, "Entry is already in DB!", "Error", JOptionPane.WARNING_MESSAGE);
            } else {
                dbAccess.persistEntity(toUpload);
                toUpload.setIsSavedToDB(true);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_onUpload

    public void addAppointment(Appointment a) {
        this.model.add(a);
    }

    public ArrayList<Appointment> getList() {
        return (ArrayList<Appointment>) this.model.list;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mDelete;
    private javax.swing.JMenuItem mUpload;
    private javax.swing.JPopupMenu popMenu;
    private javax.swing.JTable taAppointments;
    // End of variables declaration//GEN-END:variables
}
