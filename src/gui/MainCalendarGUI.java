package gui;

import import_export.FileAccess;
import java.awt.CardLayout;
import java.awt.Font;
import java.io.File;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import javax.swing.JFileChooser;
import observer.MyObserver;
import thread.ClockThread;

/**
 * Main JFrame. Displays months and other options.
 *
 * @author Laura Pein
 */
public class MainCalendarGUI extends javax.swing.JFrame implements MyObserver {

    //CardLayout um Monate anzuzeigen. Referenz: StackOverflow
    private CardLayout cLay;
    //Beinhaltet 12 Panel
    private MonthPanel[] monthArr;
    //GUI mit Table für Termine
    private AppointmentGUI tGUI = new AppointmentGUI();
    //Als CSV Exportieren
    private FileAccess fileAcces = new FileAccess();
    private JFileChooser jfc;
    //Thread für die LocalDateTime Anzeige
    private ClockThread clock = new ClockThread("ClockThread");
    private DateTimeFormatter dtf;
    private Month[] nameArr = {Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY,
        Month.JUNE, Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER};

    public MainCalendarGUI() {
        initComponents();
        //Panels werden erstellt und zugewiesen
        initCards();

        this.dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy - kk:mm:ss");
        this.lbClock.setFont(new Font("Arial", 0, 18));
        this.setSize(1557, 534);
        //Diese GUI wird als Observer registriert.
        clock.register(this);
        clock.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockPanel = new javax.swing.JPanel();
        lbClock = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        switchMonth = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clockPanel.setLayout(new java.awt.BorderLayout());

        lbClock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clockPanel.add(lbClock, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(clockPanel, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.CardLayout());
        jPanel2.add(mainPanel, java.awt.BorderLayout.CENTER);

        switchMonth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "switch month", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N
        switchMonth.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton1.setText("previous");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onPrev(evt);
            }
        });
        switchMonth.add(jButton1);

        jButton2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton2.setText("next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNext(evt);
            }
        });
        switchMonth.add(jButton2);

        jPanel2.add(switchMonth, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jMenuItem2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jMenuItem2.setText("Export Appointments to CSV");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExportCSV(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExit(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jMenuItem4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jMenuItem4.setText("Manage Appointments");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onShowAppointments(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onPrev(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onPrev
        //Vorherigen Monat anzeigen
        cLay.previous(mainPanel);
    }//GEN-LAST:event_onPrev

    private void onNext(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onNext
        //Nächsten Monat anzeigen
        cLay.next(mainPanel);
    }//GEN-LAST:event_onNext

    private void onExportCSV(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExportCSV
        //Alle Werte die im Table sind werden in eine CSV geschrieben
        this.jfc = new JFileChooser();
        this.jfc.showSaveDialog(this);
        this.fileAcces.exportToCSV(new File(jfc.getSelectedFile().getPath() + ".csv"), tGUI);
    }//GEN-LAST:event_onExportCSV

    private void onExit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExit
        System.exit(0);
    }//GEN-LAST:event_onExit

    private void onShowAppointments(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onShowAppointments
        //Table wird angezeigt
        tGUI.setVisible(true);
    }//GEN-LAST:event_onShowAppointments

    /**
     * Creates and sets all months (Cards)
     */
    private void initCards() {
        this.monthArr = new MonthPanel[12];
        for (int i = 0; i < monthArr.length; i++) {
            //Name wird zugewiesen. Referenz zu tGUI wird im Panel benötigt.
            this.monthArr[i] = new MonthPanel(this.nameArr[i], this.tGUI);
            //Panels werden als verfügbare Card hinzugefügt
            //Map-System. Panels werden über einen Key angesprochen
            this.mainPanel.add(this.monthArr[i], this.nameArr[i].toString());
        }
        cLay = (CardLayout) this.mainPanel.getLayout();
        //Startet immer mit Jänner
        cLay.show(mainPanel, Month.JANUARY.toString());
    }

    @Override
    public void update(Object data) {
        this.lbClock.setText(dtf.format((TemporalAccessor) data) + "");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCalendarGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCalendarGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCalendarGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCalendarGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCalendarGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel clockPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lbClock;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel switchMonth;
    // End of variables declaration//GEN-END:variables

}
